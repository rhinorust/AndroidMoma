{"Name":"Mapbox SDK","Id":2484,"Alias":"mapboxsdk","Description":"# MapBox SDK for Xamarin\n\nAn open source SDK for pixel-perfect vector maps on iOS and Android. Maps render at the speed and smoothness of a video game. And it\u0027s free to start developing.\n\n## Features\n\n - Fast, beautiful vector maps\n - Fully open source\n - Customizable map styles and layers\n - Frequent data updates from OpenStreetMap\n - User metrics dashboard *\n - Web-based map style editor\n - On-device vector rendering\n - User location services and compass tracking\n - Point and shape annotations\n - Raster tile support for satellite imagery and legacy maps\n \n\n## Designed without clutter\n\nMapbox Streets, our signature map style, features bright colors and clear contrast to make every location in the world recognizable. Each zoom level is balanced to show just the right amount of information. A clean, beautiful map for every city at any zoom level.\n\nEmerald features subtle, yet detailed hill shades. Get a glimpse at terrain before a jog or take Emerald through the city. Its detailed roads, major motorways, and metro routes will connect your users to their next adventure or lunch date.\n\nDark and Light are perfect styles for enhancing data. Both have just enough information to help orient users without taking the focus away from your content. Seamlessly switch from one style to the other in the same app; these styles were made to be interchanged. The clean designs of Dark and Light will make your data pop.\n\n\n### Making better maps\n\nTo improve our maps, Mapbox uses anonymized location data to benefit both our customers and anyone who uses OpenStreetMap data. Together we\u0027re building a better map.\n\n\n### Battery efficient\n\nMapbox is fast, secure, and extremely battery efficient. We tested battery usage extensively to ensure a full day\u0027s charge for your users without sacrificing performance.\n\n### Security\n\nLocation data is highly sensitive: it contains information about where we live and our daily habits. Mapbox anonymizes, aggregates, and protects all location data.\n\n\n### Data dashboards for developers\n\nFind out how users are interacting with your map. Our new data dashboard provides a continuously updated view of your map’s usage, from what neighborhoods are popular to map usage metrics.\n\nThe iOS and Android SDKs are 100% open source, licensed under BSD with all development and discussions happening on GitHub. Read more about our approach to open source at Mapbox.\n\nWe built Mapbox in C++14 using OpenGL ES 2.0, a subset of OpenGL that is available on mobile devices. With minor changes it can also run on desktop hardware. We use protocol buffers for compact vector tiles and we\u0027ve implemented custom code for text display and layout.\n\n","Version":"3.2.0.0","Summary":"Build the map your application deserves.","QuickStart":"# Mapbox Access Token\n\nAn access token is necessary to use Mapbox services and APIs, such as maps, directions, and geocoding. Your access tokens can be managed in your account settings, where you can retrieve current tokens and generate new ones. You should create a new token for each of your apps, which will help you track usage and minimize disruption in the event a token needs to be revoked.\n\nVisit http://mapbox.com to create an account and generate an access token.\n\n\n# iOS\n\nOnce you have generated an access token, you need to set it up within your app.  There are two ways to provide an access token in your app:\n\n  1. In the ***Info.plist*** file set ***MGLMapboxAccessToken*** with the value of your token.\n  2. In the ***AppDelegate.FinishedLaunching*** method, call `AccountManager.AccessToken = \"YOUR-TOKEN\";`\n  \n\n## Metrics Opt-Out\n\nThe Mapbox Terms of Service require your app to provide users with a way to individually opt out of Mapbox Metrics. You can provide this opt out in one of two ways:\n\n  1. Add a setting to your app’s section in the system Settings app (via a Settings.bundle in your application bundle).  You can download a [sample Settings.bundle file](https://www.mapbox.com/guides/data/ios/Settings.bundle.zip) to help you implement this.\n  2. Integrate the setting directly into your app. Hook the UISwitch control up to the `MGLMapboxMetricsEnabled` *Boolean* user default, which should be *YES* by default. Then set `MGLMapboxMetricsEnabledSettingShownInApp` to *YES* in your app’s *Info.plist* file.\n  \n\n## Location Services\n\nIn order to show the user’s position on the map, you must first ask for their permission. In iOS 8 and above, this is accomplished by creating and setting the `NSLocationAlwaysUsageDescription` key in the *Info.plist* file.\n\nFor developers on the free Starter plan, background location services must also be enabled. You can find instructions on how to do this in our [First Steps guide](https://www.mapbox.com/guides/first-steps-ios-sdk/#background-location).\n\n\n## Maps\n\nCreating a map is very simple using the `MapView` class:\n\n```csharp\n// Create a MapView and set the coordinates/zoom\nmapView = new MapView (View.Bounds);\nmapView.SetCenterCoordinate (new CLLocationCoordinate2D (40.7326808, -73.9843407), false);\nmapView.SetZoomLevel (11, false);\n\nView.AddSubview (mapView);\n```\n\nYou can add annotations to your map like this:\n```csharp\n// Add new annotation\nmapView.AddAnnotation (new PointAnnotation {\n    Coordinate = new CLLocationCoordinate2D (40.7326808, -73.9843407),\n    Title = \"Sample Marker\",\n    Subtitle = \"This is the subtitle\"\n});\n```\n\n\n\n\n# Android\n\n## Permissions\n\nMapbox for Android requires a few permissions to work out of the box.  You can add these permissions to the `AndroidManifest.xml` file manually, or add these assembly level attributes somewhere in your C# code:\n\n```csharp\n[assembly: UsesPermission (Android.Manifest.Permission.AccessNetworkState)]\n[assembly: UsesPermission (Android.Manifest.Permission.Internet)]\n[assembly: UsesPermission (Android.Manifest.Permission.WriteExternalStorage)]\n```\n\nIf you would like to show the user\u0027s position on the map, you must first ask for their permisson.  This is done by adding the *Access Course Location*, *Access Fine Location*, and *Access Wifi State* permissions either manually to the `AndroidManifest.xml` file or by adding these assembly level attributes in your C# code:\n\n```csharp\n[assembly: UsesPermission (Android.Manifest.Permission.AccessCoarseLocation)]\n[assembly: UsesPermission (Android.Manifest.Permission.AccessFineLocation)]\n[assembly: UsesPermission (Android.Manifest.Permission.AccessWifiState)]\n```\n\n\n## Map\n\nYou can add a `MapView` to your layouts with the following xml:\n\n```xml\n \u003ccom.mapbox.mapboxsdk.views.MapView\n    xmlns:mapbox=\"http://schemas.android.com/apk/res-auto\"\n    android:id=\"@+id/mapview\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"fill_parent\"\n    mapbox:access_token=\"YOUR-ACCESS-TOKEN\" /\u003e\n```\n\nNote that you should replace the `accessToken` attribute with the value of your own access token!\n\n\nIn your activity\u0027s `OnCreate` you can set the map up like this:\n\n```csharp\nmapView = FindViewById\u003cMapView\u003e (Resource.Id.mapview);\nmapView.StyleUrl = Style.Emerald;\nmapView.CenterCoordinate = new LatLng (41.885, -87.679);\nmapView.ZoomLevel = 11;\n\nmapView.OnCreate (savedInstanceState);\n```\n\nAdding annotations is just as easy:\n\n```csharp\nmapView.AddMarker (new MarkerOptions ()\n    .SetTitle (\"Test Marker\")\n    .SetPosition (new LatLng(41.885, -87.679)));         \n```\n\nIt\u0027s also important to implement the other Activity lifecycle events and pass them along to your MapView:\n\n```csharp\nprotected override void OnStart ()\n{\n    base.OnStart ();\n    mapView.OnStart ();\n}\n\nprotected override void OnStop ()\n{\n    base.OnStop ();\n    mapView.OnStop ();\n}\n\nprotected override void OnPause ()\n{            \n    base.OnPause ();\n    mapView.OnPause ();\n}\n\nprotected override void OnResume ()\n{            \n    base.OnResume ();\n    mapView.OnResume ();\n}\n\nprotected override void OnDestroy ()\n{            \n    base.OnDestroy ();\n    mapView.OnDestroy ();\n}\n\nprotected override void OnSaveInstanceState (Bundle outState)\n{            \n    base.OnSaveInstanceState (outState);\n    mapView.OnSaveInstanceState (outState);\n}\n```\n\n\n# More information\n\nFor more information, visit the [Mapbox Developers Website](https://www.mapbox.com/developers/).","Hash":"1e6d76d14ea757b241a65f66e286d307","TargetPlatforms":["ios","android"],"TrialHash":null}